"""Bazel build for Qronos."""

module(
    name = "qronos",
    repo_name = "qronos",
)

bazel_dep(name = "bazel_skylib", version = "1.6.1")

# bazel_dep(name = "toolchains_llvm", version = "1.0.0")
bazel_dep(name = "aspect_rules_js", version = "2.0.0-rc4")
bazel_dep(name = "rules_nodejs", version = "6.1.0")
bazel_dep(name = "rules_oci", version = "1.7.6")
bazel_dep(name = "aspect_bazel_lib", version = "2.7.7")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "aspect_rules_py", version = "0.7.3")
bazel_dep(name = "rules_python", dev_dependency = True, version = "0.33.1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.33.1")
bazel_dep(name = "gazelle", version = "0.37.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_rust", version = "0.47.1")
bazel_dep(name = "rules_gzip", version = "1.0.0-beta.1")
bazel_dep(name = "rules_uv", version = "0.14.0")
bazel_dep(name = "rules_multirun", version = "0.9.0")
bazel_dep(name = "zlib", version = "1.3.1")
# bazel_dep(name = "toolchains_protoc", version = "0.3.1")

# protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")
# protoc.toolchain(
#     # Creates a repository to satisfy well-known-types dependencies such as
#     # deps=["@com_google_protobuf//:any_proto"]
#     google_protobuf = "com_google_protobuf",
#     # Pin to any version of protoc
#     version = "v26.0",
# )

# use_repo(protoc, "com_google_protobuf", "toolchains_protoc_hub")

# register_toolchains("@toolchains_protoc_hub//:all")

# Internal Extension Section

constants = use_extension("//bazel:extensions.bzl", "constants")
use_repo(constants, "constants")

third_party = use_extension("//third_party:extensions.bzl", "third_party")
use_repo(
    third_party,
    "librusty_v8_release_x86_64-unknown-linux-gnu",
    "librusty_v8_release_x86_64-apple-darwin",
    "librusty_v8_release_aarch64-apple-darwin",
)

# C/C++ Section

# llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
# llvm.toolchain(
#     llvm_version = "16.0.0",
# )
# use_repo(llvm, "llvm_toolchain")

# register_toolchains("@llvm_toolchain//:all")

# JS Section

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "16.14.2")
use_repo(node, "nodejs")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    data = [
        "//:package.json",
        "//:pnpm-workspace.yaml",
        "//frontend:package.json",
    ],
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

# OCI Section

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

oci.pull(
    name = "bookworm_slim",
    digest = "sha256:67f3931ad8cb1967beec602d8c0506af1e37e8d73c2a0b38b181ec5d8560d395",
    image = "debian:bookworm-slim",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)

oci.pull(
    name = "distroless_base",
    digest = "sha256:786007f631d22e8a1a5084c5b177352d9dcac24b1e8c815187750f70b24a9fc6",
    image = "gcr.io/distroless/base:latest",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)

oci.pull(
    name = "graalvm_22_oci",
    digest = "sha256:bfe024278c3189370950e19e1c6bc9048b93f0655ab32c5914e514e745875560",
    image = "ghcr.io/graalvm/jdk-community:22.0.1",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)

use_repo(oci, "bookworm_slim")
use_repo(oci, "distroless_base")
use_repo(oci, "graalvm_22_oci")

# Python section

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
    is_default = True,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_darwin = "//backend/python:requirements_darwin.txt",
    requirements_linux = "//backend/python:requirements_linux.txt",
)

use_repo(pip, "pip")

# Rust section

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.79.0"],
)

use_repo(rust, "rust_toolchains")
# use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)

crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//backend/rust:Cargo.lock",
    manifests = ["//backend/rust:Cargo.toml"],
)

use_repo(crate, "crates")

crate.annotation(
    additive_build_file = "//third_party:BUILD.v8.bazel",
    crate = "v8",
    gen_build_script = "on",
    # rustc_env = {
    #     "RUSTY_V8_SRC_BINDING_PATH": "../gen/src_binding_release_aarch64-apple-darwin.rs"
    # },
    patches = [
        "//third_party/patches/rusty_v8:v8_fix_path.patch",
    ],
    patch_args = ["-p1"],
    repositories = ["crates"],
    deps = [":librusty_v8"],
    version = "*",
)

crate.annotation(
    crate = "libffi-sys",
    gen_build_script = "off",
    repositories = ["crates"],
    deps = ["@@libffi"],
    version = "*",
)

crate.annotation(
    crate = "libz-sys",
    gen_build_script = "off",
    repositories = ["crates"],
    deps = ["@@zlib"],
    version = "*",
)

crate.annotation(
    crate = "denokv_proto",
    build_script_env = {
        "PROTOC": "$(execpath @com_google_protobuf//:protoc)",
    },
    build_script_tools = [
        "@com_google_protobuf//:protoc",
    ],
    repositories = ["crates"],
    version = "*",
)
