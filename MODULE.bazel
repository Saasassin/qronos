"""Bazel build for Qronos."""

module(
    name = "qronos",
    repo_name = "qronos",
)

bazel_dep(name = "bazel_skylib", version = "1.6.1")
bazel_dep(name = "rules_java", version = "7.6.1")
bazel_dep(name = "rules_jvm_external", version = "6.1")
bazel_dep(name = "toolchains_llvm", version = "1.0.0")
bazel_dep(name = "rules_graalvm", version = "0.11.1")
bazel_dep(name = "aspect_rules_js", version = "2.0.0-rc4")
bazel_dep(name = "rules_nodejs", version = "6.1.0")
bazel_dep(name = "rules_oci", version = "1.7.6")
bazel_dep(name = "aspect_bazel_lib", version = "2.7.7")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "aspect_rules_py", version = "0.7.3")
bazel_dep(name = "rules_python", dev_dependency = True, version = "0.33.1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.33.1")
bazel_dep(name = "gazelle", version = "0.37.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_rust", version = "0.46.0")
bazel_dep(name = "rules_gzip", version = "1.0.0-beta.1")

# Internal Extension Section

constants = use_extension("//bazel:extensions.bzl", "constants")
use_repo(constants, "constants")

third_party = use_extension("//third_party:extensions.bzl", "third_party")
use_repo(
    third_party,
    "librusty_v8_release_x86_64-unknown-linux-gnu",
    "librusty_v8_release_x86_64-apple-darwin",
)

# C/C++ Section

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "16.0.0",
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

# JVM Section

SCALA_VERSION = "3"

SCALA_BUGFIX_VERSION = "3.1"

SCALA_FULL_VERSION = "{}.{}".format(SCALA_VERSION, SCALA_BUGFIX_VERSION)

PEKKO_VERSION = "1.0.1"

HTTP4S_VERSION = "1.0.0-M41"

constants.export(
    name = "constants",
    key = "SCALA_VERSION",
    value = SCALA_VERSION,
)
constants.export(
    name = "constants",
    key = "SCALA_VERSION_SUFFIX",
    value = SCALA_VERSION.replace(".", "_"),
)
constants.export(
    name = "constants",
    key = "SCALA_FULL_VERSION",
    value = SCALA_FULL_VERSION,
)

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "mvn",
    artifacts = [
        "com.typesafe:config:1.4.3",
        "org.apache.pekko:pekko-http-core_{}:{}".format(SCALA_VERSION, PEKKO_VERSION),
        "org.apache.pekko:pekko-http_{}:{}".format(SCALA_VERSION, PEKKO_VERSION),
        "org.apache.pekko:pekko-actor_{}:{}".format(SCALA_VERSION, PEKKO_VERSION),
        "org.apache.pekko:pekko-actor-typed_{}:{}".format(SCALA_VERSION, PEKKO_VERSION),
        "org.apache.pekko:pekko-stream_{}:{}".format(SCALA_VERSION, PEKKO_VERSION),
        "org.slf4j:slf4j-api:2.0.13",
        "ch.qos.logback:logback-classic:1.3.6",
        "org.jetbrains.bsp:bazel-bsp:3.2.0",
        "org.typelevel:cats-effect_{}:3.5.4".format(SCALA_VERSION),
        "org.typelevel:cats-effect-kernel_{}:3.5.4".format(SCALA_VERSION),
        "org.typelevel:cats-core_{}:2.12.0".format(SCALA_VERSION),
        # "org.scala-lang:scala-library:{}".format(SCALA_FULL_VERSION),
        "org.http4s:http4s-core_{}:{}".format(SCALA_VERSION, HTTP4S_VERSION),
        # "org.http4s:http4s-ember-client_{}:{}".format(SCALA_VERSION, HTTP4S_VERSION),
        "org.http4s:http4s-ember-server_{}:{}".format(SCALA_VERSION, HTTP4S_VERSION),
        "org.http4s:http4s-dsl_{}:{}".format(SCALA_VERSION, HTTP4S_VERSION),
        # "org.http4s:http4s-circe_{}:{}".format(SCALA_VERSION, HTTP4S_VERSION),
        "io.circe:circe-core_{}:0.14.7".format(SCALA_VERSION),
        # "io.circe:circe-generic_{}:0.14.7".format(SCALA_VERSION),
        "io.circe:circe-literal_{}:0.14.7".format(SCALA_VERSION),
        "org.typelevel:log4cats-slf4j_{}:2.7.0".format(SCALA_VERSION),
        "org.typelevel:log4cats-core_{}:2.7.0".format(SCALA_VERSION),
        "co.fs2:fs2-io_{}:3.10.2".format(SCALA_VERSION),
        "com.comcast:ip4s-core_{}:3.5.0".format(SCALA_VERSION),
        "com.lihaoyi:os-lib_{}:0.10.2".format(SCALA_VERSION),
    ],
    fail_if_repin_required = True,
    fetch_sources = True,
    lock_file = "//:maven_install.json",
    repositories = [
        "https://repo1.maven.org/maven2",
    ],
    strict_visibility = True,
)
use_repo(
    maven,
    "mvn",
)

gvm = use_extension("@rules_graalvm//:extensions.bzl", "graalvm")
gvm.graalvm(
    name = "graalvm",
    distribution = "ce",  # `oracle`, `ce`, or `community`
    java_version = "21",  # `17`, `20`, `21`, or `22` as supported by the version provided
    version = "21.0.2",  # gvm sdk version format like `24.x.x` also supported
)
use_repo(gvm, "graalvm")

register_toolchains("@graalvm//:jvm")
register_toolchains("@graalvm//:sdk")
register_toolchains("@graalvm//:bootstrap_runtime_toolchain")

# JS Section

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "16.14.2")
use_repo(node, "nodejs")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    data = [
        "//:package.json",
        "//:pnpm-workspace.yaml",
        "//frontend:package.json",
    ],
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

# OCI Section

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

oci.pull(
    name = "bookworm_slim",
    digest = "sha256:67f3931ad8cb1967beec602d8c0506af1e37e8d73c2a0b38b181ec5d8560d395",
    image = "debian:bookworm-slim",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)

oci.pull(
    name = "distroless_base",
    digest = "sha256:786007f631d22e8a1a5084c5b177352d9dcac24b1e8c815187750f70b24a9fc6",
    image = "gcr.io/distroless/base:latest",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/s390x",
    ],
)

oci.pull(
    name = "graalvm_22_oci",
    digest = "sha256:bfe024278c3189370950e19e1c6bc9048b93f0655ab32c5914e514e745875560",
    image = "ghcr.io/graalvm/jdk-community:22.0.1",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)

use_repo(oci, "bookworm_slim")
use_repo(oci, "distroless_base")
use_repo(oci, "graalvm_22_oci")

# Python section

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
    is_default = True,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

pip.parse(
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//backend/python:requirements.txt",
)

use_repo(pip, "pip")

# Rust section

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)

crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//backend/rust:Cargo.lock",
    manifests = ["//backend/rust:Cargo.toml"],
)

use_repo(crate, "crates")

crate.annotation(
    additive_build_file = "//third_party:BUILD.v8.bazel",
    crate = "v8",
    gen_build_script = "off",
    repositories = ["crates"],
    deps = [":librusty_v8"],
    version = "*",
)
