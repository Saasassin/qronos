# gazelle:map_kind py_library py_library @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_binary py_binary @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_test py_test @aspect_rules_py//py:defs.bzl
# gazelle:python_root
# gazelle:exclude .main.venv

load("@aspect_rules_py//py:defs.bzl", "py_binary", "py_library")
load("@pip//:requirements.bzl", "all_whl_requirements")
load("@rules_multirun//:defs.bzl", "multirun")
load("@rules_python//python/pip_install:requirements.bzl", "compile_pip_requirements")
load("@rules_uv//uv:pip.bzl", "pip_compile")
load("//bazel:python.bzl", "py_setup_gazelle")

pip_compile(
    name = "generate_requirements_linux_txt",
    python_platform = "x86_64-unknown-linux-gnu",
    requirements_in = "requirements.in",
    requirements_txt = "requirements_linux.txt",
)

pip_compile(
    name = "generate_requirements_darwin_txt",
    python_platform = "aarch64-apple-darwin",
    requirements_in = "requirements.in",
    requirements_txt = "requirements_darwin.txt",
)

multirun(
    name = "generate_requirements_lock",
    commands = [
        ":generate_requirements_linux_txt",
        ":generate_requirements_darwin_txt",
    ],
    jobs = 1,
)

py_setup_gazelle(
    all_whl_requirements = all_whl_requirements,
    requirements_lock = "requirements.txt",
)

py_binary(
    name = "main",
    srcs = ["main.py"],
    data = [".env"],
    visibility = ["//backend/python:__subpackages__"],
    deps = [
        "//backend/python/qronos",
        "@pip//fastapi",
        "@pip//pydantic",
        "@pip//uvicorn",
    ],
)

py_library(
    name = "python",
    srcs = ["main.py"],
    visibility = ["//backend/python:__subpackages__"],
    deps = [
        "//backend/python/qronos",
        "@pip//fastapi",
        "@pip//pydantic",
        "@pip//uvicorn",
    ],
)
